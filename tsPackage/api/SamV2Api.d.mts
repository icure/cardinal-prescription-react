import { PaginatedListIterator } from '../cardinal-be-sam-ts.mjs';
import { Amp } from '../model/samv2/Amp.mjs';
import { Nmp } from '../model/samv2/Nmp.mjs';
import { Paragraph } from '../model/samv2/Paragraph.mjs';
import { PharmaceuticalForm } from '../model/samv2/PharmaceuticalForm.mjs';
import { SamVersion } from '../model/samv2/SamVersion.mjs';
import { Substance } from '../model/samv2/Substance.mjs';
import { Verse } from '../model/samv2/Verse.mjs';
import { Vmp } from '../model/samv2/Vmp.mjs';
import { VmpGroup } from '../model/samv2/VmpGroup.mjs';
export interface SamV2Api {
    getSamVersion(): Promise<SamVersion>;
    findPaginatedAmpsByLabel(language: string | undefined, label: string | undefined): Promise<PaginatedListIterator<Amp>>;
    findPaginatedVmpsByLabel(language: string | undefined, label: string | undefined): Promise<PaginatedListIterator<Vmp>>;
    findPaginatedVmpsByGroupCode(vmpgCode: string): Promise<PaginatedListIterator<Vmp>>;
    findPaginatedVmpsByVmpCode(vmpCode: string): Promise<PaginatedListIterator<Vmp>>;
    findPaginatedNmpsByLabel(language: string | undefined, label: string | undefined): Promise<PaginatedListIterator<Nmp>>;
    findPaginatedVmpsByGroupId(vmpgId: string): Promise<PaginatedListIterator<Vmp>>;
    findPaginatedAmpsByGroupCode(vmpgCode: string): Promise<PaginatedListIterator<Amp>>;
    findPaginatedAmpsByGroupId(ampId: string): Promise<PaginatedListIterator<Amp>>;
    findPaginatedAmpsByVmpCode(vmpCode: string): Promise<PaginatedListIterator<Amp>>;
    findPaginatedAmpsByAtc(atcCode: string): Promise<PaginatedListIterator<Amp>>;
    findPaginatedAmpsByVmpId(vmpId: string): Promise<PaginatedListIterator<Amp>>;
    findAmpsByDmppCode(dmppCode: string): Promise<Array<Amp>>;
    findAmpsByAmpCode(ampCode: string): Promise<Array<Amp>>;
    findPaginatedVmpGroupsByLabel(language: string | undefined, label: string | undefined): Promise<PaginatedListIterator<VmpGroup>>;
    findPaginatedVmpGroupsByVmpGroupCode(vmpgCode: string): Promise<PaginatedListIterator<VmpGroup>>;
    listVmpsByVmpCodes(vmpCodes: Array<string>): Promise<Array<Vmp>>;
    listVmpsByGroupIds(vmpgIds: Array<string>): Promise<Array<Vmp>>;
    listAmpsByGroupCodes(ampCodes: Array<string>): Promise<Array<Amp>>;
    listAmpsByDmppCodes(dmppCodes: Array<string>): Promise<Array<Amp>>;
    listAmpsByGroupIds(groupIds: Array<string>): Promise<Array<Amp>>;
    listAmpsByVmpCodes(vmpgCodes: Array<string>): Promise<Array<Amp>>;
    listAmpsByVmpIds(vmpIds: Array<string>): Promise<Array<Amp>>;
    listVmpGroupsByVmpGroupCodes(vmpgCodes: Array<string>): Promise<Array<VmpGroup>>;
    listNmpsByCnks(cnks: Array<string>): Promise<Array<Nmp>>;
    listSubstances(): Promise<Array<Substance>>;
    listPharmaceuticalForms(): Promise<Array<PharmaceuticalForm>>;
    getAddedDocument(chapterName: string, paragraphName: string, verseSeq: number, docSeq: number, language: string): Promise<Int8Array>;
    findParagraphs(searchString: string, language: string): Promise<Array<Paragraph>>;
    findParagraphsWithCnk(cnk: number, language: string): Promise<Array<Paragraph>>;
    getAmpsForParagraph(chapterName: string, paragraphName: string): Promise<Array<Amp>>;
    getVtmNamesForParagraph(chapterName: string, paragraphName: string, language: string): Promise<Array<string>>;
    getVersesHierarchy(chapterName: string, paragraphName: string): Promise<Verse | undefined>;
}
